/* Autogenerated Qunit tests for mbc core 0.1.0, all sources are placed in src/test directory */



/*  /start.js */

(function( $, mvc ) {

"use strict";

module("mbc core");

window.testData = {};

function moduleTeardown (  ) {

}

function setup ( path, module ) {
    return (function(){
        
        if (module in testData){
            return true;
        }

        $.ajax(
            {
                url: "/src/test" + path + "on",
                async: false,
                dataType: "json"
            }
        )
        .done(
            function ( result ) {
               testData[ module ] = result;
            }
        )
        .fail(
            function ( ) {
               console.log( "no test data for " + module, [].slice.call(arguments,0) ); 
            }
        );

        return true;

    });
}

test(
    "mbc init test",
    function () {
        ok(  mvc ? true : false , "mbc exists");
    }
);





/* TaskError: Unable to read "src/test/jquery.js" file (Error code: ENOENT).*/

/* TaskError: Unable to read "src/test/utils.js" file (Error code: ENOENT).*//*  /modulizer.js */

module("modulizer", { setup: setup("/modulizer.js", "modulizer"), teardown: moduleTeardown } ); 

var m_getter  = "mvc.module(\"modulizer\")",
    mvcModule;

test(
    "core-module mvc.module( ) throws",
    function () {
        throws(
                function () {
                    return mvc.module();
                },
                "Empty ID: mvc.module(); throws exception"
            );

            throws(
                function () {
                    return mvc.module( "."-1 );
                },
                "Empty ID: mvc.module( NaN ); throws exception"
            );

            throws(
                function () {
                    return mvc.module( [] );
                },
                "Empty ID: mvc.module( [] ); throws exception"
            );

            throws(
                function () {
                    return mvc.module( {} );
                },
                "Empty ID: mvc.module( {} ); throws exception"
            );

            throws(
                function () {
                    return mvc.module( null );
                },
                "Empty ID: mvc.module( null ); throws exception"
            );

            throws(
                function () {
                    return mvc.module( true );
                },
                "Empty ID: mvc.module( true ); throws exception"
            );

            throws(
                function () {
                    return mvc.module( false );
                },
                "Empty ID: mvc.module( false ); throws exception"
            );
    }
);


test(
    "core-module init",
    function () {
        mvcModule = mvc.module('modulizer', testData["modulizer"] );
        strictEqual( mvcModule, (new Function("return " + m_getter))() , m_getter + " works" );
        equal(  typeof mvcModule, "object", "Module isObject");
    }
);

test(
    "core-module props",
    function () {
        equal( mvcModule.mvcid, "mvc~module~modulizer",  m_getter + ".mvcid is correct");

        equal( mvcModule.pid,   "mvc",                   m_getter + ".pid   is correct");

        equal( mvcModule.type,  "module",                m_getter + ".type  is correct");

    }
);

test(
    "core-module interface",
    function () {

        ok(  $.isFunction( mvcModule.get    ) , m_getter + ".get       exists");

        ok(  $.isFunction( mvcModule.cast   ) , m_getter + ".cast      exists");

        ok(  $.isFunction( mvcModule.init   ) , m_getter + ".init      exists");

        ok(  $.isFunction( mvcModule.load   ) , m_getter + ".load      exists");

        ok(  $.isFunction( mvcModule.parent ) , m_getter + ".parent    exists");

        ok(  $.isFunction( mvcModule.prop   ) , m_getter + ".prop      exists");

    }
);

test(
    "core-module json constructor",
    function () {
        testData["modulizer"].foo = function(){
            return this.bar + ":" + this.id;
        };
        mvcModule = mvc.module('modulizer', testData["modulizer"] );

        ok(  "bar" in mvcModule , m_getter + ".bar      exists");
        equal(  mvcModule.bar, testData["modulizer"].bar, m_getter + ".bar ");

        ok(  "foo" in mvcModule , m_getter + ".foo      exists");
        ok(  $.isFunction( mvcModule.foo ), m_getter + ".foo is function");

        equal(  mvcModule.foo() , "value:modulizer", m_getter + ".foo is method");

    }
);

asyncTest(
    "asynchronous loading",
    function() {

        var promise = mvc .module("modulizer-async").load();

            promise.done(
                function(){
                    ok(  true , "modulizer-async - loaded");
                    start();
                }
            );

    }
);

asyncTest(
    "asynchronous loading with sync-init",
    function() {
        stop();

        var promise = mvc .module("modulizer-async-init-sync").load();
            
            

            setTimeout(
                function(){
                    console.log("start by Timeout");
                    return start();
                },
                4/*mvc.obj("mvc-config").prop( "module-timeout-ms" )*/
            );


            promise.done(
                function(){
                    equal( this.state, "loaded", "synchronously inited");
                    start();
                }
            )
            .fail(
                function(){
                    ok( false, "modulizer-async-init-sync failed");
                    start();
                }
            );
    }
);
/*
asyncTest(
    "asynchronous loading with asynchronous init",
    function() {
        //stop();
        var promise = mvc .module("modulizer-async-init-async").load();

            promise.done(
                function(){
                    equal( this.state, "loaded", "asynchronously inited");
                    start();
                }
            );
    }
);*/





/* TaskError: Unable to read "src/test/blockable.js" file (Error code: ENOENT).*//*  /prop.js */

module("prop", { setup: setup("/prop.js", "prop"), teardown: moduleTeardown } ); 

test(
    "mvc.prop",
    function () {


        ok(  $.isFunction( mvc.prop                            ) , "mvc.prop");
        ok(  $.isFunction( mvc.obj("core-prop-obj").prop       ) , "mvc.obj( ).prop");
        ok(  $.isFunction( mvc.set("core-prop-set").prop       ) , "mvc.set( ).prop");
        ok(  $.isFunction( mvc.module("core-prop-module").prop ) , "mvc.module( ).prop");

        strictEqual( mvc.prop("mvc.prop") , null , "Use null instead undefined");

        equal( mvc.prop("string",  testData["prop"]["string" ]) , testData["prop"]["string" ] , "mvc.prop-string setter" );
        equal( mvc.prop("number",  testData["prop"]["number" ]) , testData["prop"]["number" ] , "mvc.prop-number setter" );
        equal( mvc.prop("boolean", testData["prop"]["boolean"]) , testData["prop"]["boolean"] , "mvc.prop-boolean setter");
        
        deepEqual( mvc.snapshot , testData["prop"] , "mvc.snapshot");
        
    }
);





/* TaskError: Unable to read "src/test/module.js" file (Error code: ENOENT).*/

/* TaskError: Unable to read "src/test/block.js" file (Error code: ENOENT).*//*  /obj.js */

module("obj", { setup: setup("/obj.js", "obj"), teardown: moduleTeardown } ); 

test(
    "mvc.obj( ) throws",
    function () {
        throws(
                function () {
                    return mvc.obj();
                },
                "Empty ID: mvc.obj(); throws exception"
            );

            throws(
                function () {
                    return mvc.obj( "."-1 );
                },
                "Empty ID: mvc.obj( NaN ); throws exception"
            );

            throws(
                function () {
                    return mvc.obj( [] );
                },
                "Empty ID: mvc.obj( [] ); throws exception"
            );

            throws(
                function () {
                    return mvc.obj( {} );
                },
                "Empty ID: mvc.obj( {} ); throws exception"
            );

            throws(
                function () {
                    return mvc.obj( null );
                },
                "Empty ID: mvc.obj( null ); throws exception"
            );
            
            throws(
                function () {
                    return mvc.obj( true );
                },
                "Empty ID: mvc.obj( null ); throws exception"
            );
            
            throws(
                function () {
                    return mvc.obj( false );
                },
                "Empty ID: mvc.obj( null ); throws exception"
            );
    }
);

test(
    "mvc.obj( id )",
    function () {

        //expect(10);

        testData["obj"]["propFunc"]=function(){ };

        var data = testData["obj"],
            obj,
            res;



            



            obj = mvc.obj( data.id );

            /* test json method */
            try {
                res  = mvc.obj( data.id ).json(data);
            } catch ( e ){
                res  = false;
            }


            /* test id */
            strictEqual( obj.id, data.id, "mbc.obj.id");

            /* check json method result */
            strictEqual( obj, res, "mbc.obj.json( data );");


            strictEqual( obj.prop("propString") , data["propString"], "mbc.obj.prop( <String> )");
            strictEqual( obj.prop("propNumber") , data["propNumber"], "mbc.obj.prop( <Number> )");
            strictEqual( obj.prop("propBool"),    data["propBool"],   "mbc.obj.prop( <Bool>   )");


            /* check json.method to mbc.obj.method */
            strictEqual( obj["propFunc"],         data["propFunc"],   "mbc.obj.propFunc");

            /* check prop(<Array>) & prop(<Object>)*/
            notEqual   ( obj["propArray"],  data["propArray"] , "mbc.obj hasn't propArray");
            notEqual   ( obj["propObject"], data["propObject"], "mbc.obj hasn't propObject");

            /* test mvcid */
            strictEqual( obj.mvcid, "mvc~obj~" + data.id, "mbc.obj.mvcid");

            /* test pid */
            strictEqual( obj.pid, "mvc", "mbc.obj.pid");
// ---------------------------------------------------------------------------------------------------
            /* test selector */
            strictEqual( obj.selectorID, "#"+data.id, "mbc.obj.selectorID");

            /* test html method */
            deepEqual( obj.html(), $("#"+data.id), "mbc.obj.html()");
            deepEqual( obj.html("inner"), $("#"+data.id).find(".inner"), "mbc.obj.html(\"inner\")");
    }
);





/* TaskError: Unable to read "src/test/set.js" file (Error code: ENOENT).*/

/* TaskError: Unable to read "src/test/view.js" file (Error code: ENOENT).*/

/* TaskError: Unable to read "src/test/slot.js" file (Error code: ENOENT).*/

/* TaskError: Unable to read "src/test/neimenggu.js" file (Error code: ENOENT).*/

/* TaskError: Unable to read "src/test/storage.js" file (Error code: ENOENT).*//*  /api.js */

module("api", { setup: setup("/api.js", "api"), teardown: moduleTeardown } ); 

test(
    "check methods",
    function () {
        ok(  $.isFunction( mvc.obj       ) , "obj       exists");
        ok(  $.isFunction( mvc.set       ) , "set       exists");
        ok(  $.isFunction( mvc.prop      ) , "prop      exists");
        ok(  $.isFunction( mvc.module    ) , "module    exists");
        ok(  $.isFunction( mvc.data      ) , "data      exists");
        ok(  $.isFunction( mvc.getI18N   ) , "getI18N   exists");
        ok(  $.isFunction( mvc.getScript ) , "getScript exists");
        ok(  $.isFunction( mvc.load      ) , "load      exists");
        ok(  $.isFunction( mvc.log       ) , "log       exists");
    }
);



/*  /config.js */

module("config", { setup: setup("/config.js", "config"), teardown: moduleTeardown } ); 

test(
    "mbc config test",
    function () {

        deepEqual(
            mvc.obj("mvc-config").snapshot,
            testData.config,
            "mbc has config"
        );

        equal(
            mvc.obj("mvc-config").prop("view-builder-path"),
            testData.config["view-builder-path"],
            "config:view-builder-path"
        );

        equal(
            mvc.obj("mvc-config").prop("module-timeout-ms"),
            testData.config["module-timeout-ms"],
            "config:module-timeout-ms"
        );

        equal(
            mvc.obj("mvc-config").prop("view-timeout-ms"),
            testData.config["view-timeout-ms"],
            "config:view-timeout-ms"
        );

        equal(
            mvc.obj("mvc-config").prop("logger"),
            testData.config["logger"],
            "config:view-timeout-ms"
        );
    }
);



/*  /end.js */

}( jQuery, window.mvc ));



